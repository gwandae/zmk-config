/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

/ {
    keymap {
        compatible = "zmk,keymap";

        default {
            bindings = <
&kp ESC          &kp N1  &kp N2  &kp N3  &kp N4  &kp N5                                               &kp N6       &kp N7              &kp N8     &kp N9   &kp N0    &kp BSPC
&kp TAB          &kp Q   &kp W   &kp E   &kp R   &kp T                                                &kp Y        &kp U               &kp I      &kp O    &kp P     &kp DEL
&lt 2 BACKSPACE  &kp A   &kp S   &kp D   &kp F   &kp G                                                &kp H        &kp J               &kp K      &kp L    &kp SEMI  &kp SQT
&kp ENTER        &kp Z   &kp X   &kp C   &kp V   &kp B        &trans               &trans             &kp N        &kp M               &kp COMMA  &kp DOT  &kp FSLH  &kp RSHFT
                         &trans  &trans  &mo 3   &lt 1 SPACE  &kt LG(BACKSPACE)    &kp LC(BACKSPACE)  &lt 1 SPACE  &lt 3 LANG_HANGEUL  &kp LGUI   &trans
            >;
        };

        num_nav {
            bindings = <
&trans     &trans    &trans  &trans  &trans  &trans                       &trans        &trans        &trans     &trans         &trans         &kp BSPC
&kp TAB    &kp LBKT  &kp N7  &kp N8  &kp N9  &kp RBKT                     &kp LG(Z)     &kp LA(LEFT)  &kp UP     &kp LA(RIGHT)  &kp MINUS      &trans
&kp BSPC   &kp SEMI  &kp N4  &kp N5  &kp N6  &kp EQUAL                    &kp LG(LEFT)  &kp LEFT      &kp DOWN   &kp RIGHT      &kp LG(RIGHT)  &trans
&kp ENTER  &kp N0    &kp N1  &kp N2  &kp N3  &trans     &trans    &trans  &kp LG(A)     &kp LG(V)     &kp LG(C)  &kp LG(X)      &trans         &kp RIGHT_SHIFT
                     &trans  &trans  &trans  &trans     &trans    &trans  &trans        &trans        &trans     &trans
            >;
        };

        mouse_function {
            bindings = <
&kp GRAVE  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5                       &kp F6     &kp F7     &kp F8  &kp F9  &kp F10  &kp F11
&kp TAB    &trans  &trans  &trans  &trans  &trans                       &trans     &trans     &trans  &trans  &trans   &kp F12
&kp BSPC   &trans  &trans  &trans  &trans  &trans                       &trans     &trans     &trans  &trans  &trans   &trans
&trans     &trans  &trans  &trans  &trans  &trans  &trans    &trans     &trans     &trans     &trans  &trans  &trans   &trans
                   &trans  &trans  &trans  &trans  &trans    &mkp LCLK  &mkp RCLK  &mkp MCLK  &trans  &trans
            >;
        };

        upper {
            bindings = <
&kp ESC    &kp LS(EXCL)  &kp LS(AT)  &kp LS(POUND)  &kp N4     &kp N5                       &kp N6     &kp N7     &kp N8     &kp N9     &kp N0         &kp BSPC
&kp TAB    &kp LS(Q)     &kp LS(W)   &kp LS(E)      &kp LS(R)  &kp LS(T)                    &kp LS(Y)  &kp LS(U)  &kp LS(I)  &kp LS(O)  &kp LS(P)      &kp DEL
&kp BSPC   &kp LS(A)     &kp LS(S)   &kp LS(D)      &kp LS(F)  &kp LS(G)                    &kp LS(H)  &kp LS(J)  &kp LS(K)  &kp LS(L)  &kp LS(COLON)  &kp LS(DQT)
&kp LSHFT  &kp LS(Z)     &kp LS(X)   &kp LS(C)      &kp LS(V)  &kp LS(B)  &trans    &trans  &kp LS(N)  &kp LS(M)  &kp COMMA  &kp DOT    &kp FSLH       &kp RSHFT
                         &trans      &trans         &trans     &trans     &trans    &trans  &trans     &trans     &trans     &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
            >;
        };

      
    };
};
